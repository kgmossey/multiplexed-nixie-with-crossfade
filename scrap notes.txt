Original BCD arrary:
// Create an index if binary coded decimal values to easily reference
byte bcd[100] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  // 00 01 02 03 04 05 06 07 08 09
                 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,  // 10 11 12 13 14 15 16 17 18 19
                 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,  // 20 21 22 23 24 25 26 27 28 29
                 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  // 30 31 32 33 34 35 36 37 38 39
                 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,  // 40 41 42 43 44 45 46 47 48 49
                 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,  // 50 51 52 53 54 55 56 57 58 59
                 96, 97, 98, 99,100,101,102,103,104,105,  // 60 61 62 63 64 65 66 67 68 69
                112,113,114,115,116,117,118,119,120,121,  // 70 71 72 73 74 75 76 77 78 79
                128,129,130,131,132,133,134,135,136,137,  // 80 81 82 83 84 85 86 87 88 89
                144,145,146,147,148,149,150,151,152,153}; // 90 91 92 93 94 95 96 97 98 99


byte bcd[100] = { 0, 128, 32, 160, 16, 144, 48, 176, 64, 192,  // 00 01 02 03 04 05 06 07 08 09
                  8, 136, 40, 168, 24, 152, 56, 184, 72, 200,  // 10 11 12 13 14 15 16 17 18 19
                  2, 130, 34, 162, 18, 146, 50, 178, 66, 194,  // 20 21 22 23 24 25 26 27 28 29
                 10, 138, 42, 170, 26, 154, 58, 186, 74, 202,  // 30 31 32 33 34 35 36 37 38 39
                  1, 129, 33, 161, 17, 145, 49, 177, 65, 193,  // 40 41 42 43 44 45 46 47 48 49
                  9, 137, 41, 169, 25, 153, 57, 185, 73, 201,  // 50 51 52 53 54 55 56 57 58 59
                  3, 131, 35, 163, 19, 147, 51, 179, 67, 195,  // 60 61 62 63 64 65 66 67 68 69
                 11, 139, 43, 171, 27, 155, 59, 187, 75, 203,  // 70 71 72 73 74 75 76 77 78 79
                  4, 132, 36, 164, 20, 148, 52, 180, 68, 196,  // 80 81 82 83 84 85 86 87 88 89
                 12, 140, 44, 172, 28, 156, 60, 188, 76, 204}; // 90 91 92 93 94 95 96 97 98 99

byte bcd_ones_only[10] = { 15, 143,  47, 175,  31, 159,  63, 191,  79, 207}; // -0 -1 -2 -3 -4 -5 -6 -7 -8 -9
byte bcd_tens_only[10] = {240, 248, 242, 250, 241, 249, 243, 251, 244, 252}; // 0- 1- 2- 3- 4- 5- 6- 7- 8- 9-


Transition triggers
Right
Off

MultiplexSM:
  Tick max count is 10
  MultiplexSM could possibly have a "TransitionNext" function?
    - LeftTubesOn -> TubesOff_L -> CenterTubesOn -> TubesOff_C -> RightTubesOn -> TubesOff_R -> LeftTubesOn

Date display:
  If DISPLAY_DATE == 1 then the date will be displayed every 5 seconds for 3 seconds.
  This is configurable with DISPLAY_DATE_START and DISPLAY_DATE_END.
    -Every half second display_date_step increases by one.
    -After 8 seconds display_date_step resets to zero (16 ticks).
  States: Time, Date, TimeSet, DateSet, Settings
  User configurable settings: Show Date, Crossfade speed 

CrossfadeSM:
  Set max tick count to 240 or 250. When it reaches max, reset to 0 and increment xfade_pass
  states: previous, current
  If MultiplexSM tick <= xfade_pass, set state to current, otherwise previous

MultiplexTick XfadeTick XfadeStep 
    0            0          0
    1            1          0
   ...          ...         0
    9            9          0
    0           10          0
    1           11          0
   ...          ...         0
    9           239         0
    0            0          1
    1            1          1
    2            2          1
   ...          ...         1
    9           239         1
    0            0          9



Old algorithms:
~~~~~~~~~~~~~~~
  Display Crossfade:
  Every 10th of a millisecond:
    tubepair_step_counter increments by 1, when it reaches 30 (aka 3 thousandths of a second):
      resets tubepair_step_counter to 0
      increases xfade_premult by one
      compares xfade_premult with CROSSFADE_SPEED.  If a multiple of: increase "pass" until pass = 10
      pass is compared with tubepair_step_counter.  If the ones place is less than pass, tubes show new value, otherwise, old value

Programming:
~~~~~~~~~~~~
 Arduino Uno Board | Board connection slot
        D0         |          2
        D1         |          3
       Gnd         |          8
      Reset        | Chip pin 1 (direct cxn)
     5v -N/A-      | Ensure board is powered



ClockSM:
Behavior - Two timers, one every 1/2 second, the other every other 1000th of a second. Button needs detection faster than 1/2 second so need to use the faster timer. Needs some level of debounce.

Need an allow repeat property. 

Pressing Settings button, once debounce is completed, should not fire anything else until pressed again.  Pressing settings button should advance to the next setting, in the order of:
  0- Hours (0-23)
  0- Minutes (0-59)
  0- Seconds (0-59)
  1- Year (Range of chip)
  2- Month (1-12)
  3- Day (1-31, depending on Month)
  4- Brightness (1-8)
  5- Sleep number of minutes (0-600 or 10 hours)
  6- Tube pair wake up time in 10ms increments (ex: value of 5 = 50ms, 15 = 150ms)
  9- TBD
Settings should return to time display after no input for 10 seconds.
If in settings mode, double clicking settings should return to previous setting.  Double click is two presses of x1-x2 duration separated by y1-y2 ms.  

Pressing advance/decrease buttons should advance setting by:
  - 1/800ms for the first 5 seconds
  - 1/400ms for next 3 seconds
  - 1/200ms for next 2 seconds
  - 1/100ms for remainder of time 
  From 0:
  1-5    5 seconds
  6-9    8 seconds
  10-13 10 seconds 
  14-59 21.5 seconds 

Todo: 
- set sleep = 0 to be infinite on 
- refactor code
  - make single include file of all global constants (Brightness settings for example)
- Move button input pins to be next to each other on header (figure out D8 being constantly pressed)
- Make button.cpp and button.h separate submodules like RTC_DS1307 and FiniteStateMachine
- Add CAD files to github
- update button bracket
- Update settings to allow for manual config of hours that cathode protection routine runs (currently 12-16)

Done:
Updates-3Mar23
- fix year set (20xx on display)
- Turn off setup mode after 10 seconds of inactivity
- Change PowerState.setMaxTick (3000000); line to read from memory and set as settings

Updates-3Mar23b
- Added reset to settings state machine tick when pressing advance or decrease buttons 

Updates-8Mar23
- Changed "Brightness" setting on display to show 1-8 for dim-bright (previously was 8 to 1 matching code)
- Added anti-cathode poisoning routine to sleep function
- changed hardcoded 24 to sizeof(array) in: Button Advance and Decrease definitions in main.h

Updates-26Jun23
- Added routines to prevent cathode poisoning
- Defined names for memory addresses
- got rid of cycling digits when going to sleep 
- bug fix: center tubes did not display values for sleep time in settings
- StateMachine: Added != operator override 
- StateMachine: Added trigger flag 
- Display: Added update function to show max brightness 
- Added Dirty flag for time 

Updates-23Dec23
- Fix wake up bug where tubes don't all light up at once

Updates-27Dec23
- Update debounce delay from 5ms to 50ms which is similar to keyboard debounce values
- Fixed update of setMaxTick in powerstate - was trying to read via SPI during IRQ 

Updates-03Jan24
- Added a configurable setting to adjust how long each pair of tubes is on full power before multiplexing begins

Intermediate updates:
- Moved RTC_DS1307 and FiniteStateMachine to submodules
- Added Readme.md to FiniteStateMachine repo...